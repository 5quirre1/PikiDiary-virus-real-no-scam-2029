# this code sucks so feel free to fork and make better rgeg
# pikidiary is owned by jax and graybox, i don't own piki and this is just for fun rgehg
# Squirrel - 2/7/25

import os
import random
import time
import base64
from io import BytesIO
from PIL import Image, ImageDraw, ImageFont
import signal

GREG = []
WOW = """"""



def peak():
    images = []
    for root, _, files in os.walk(os.getcwd()):
        for f in files:
            if f.lower().endswith(('png', 'jpg', 'jpeg', 'gif', 'bmp', 'webp', 'jfif')):
                images.append(os.path.join(root, f))
    return random.choice(images) if images else None


def wow():
    image_data = base64.b64decode(WOW)
    overlay = Image.open(BytesIO(image_data)).convert("RGBA")
    overlay = overlay.resize((overlay.width // 2, overlay.height // 2))
    return overlay


def greg(background_path):
    try:
        bg = Image.open(background_path).convert("RGBA")
    except IOError:
        print(f"couldn't peak: {background_path}")
        return
    overlay = wow()
    overlay_width, overlay_height = overlay.size
    bg_width, bg_height = bg.size

    total_embeds = 0
    while total_embeds < 150:
        x = random.randint(-overlay_width, bg_width)
        y = random.randint(-overlay_height, bg_height)
        bg.paste(overlay, (x, y), overlay)
        total_embeds += 1

    draw = ImageDraw.Draw(bg)
    try:
        font = ImageFont.truetype("C:\\Windows\\Fonts\\comic.ttf", 40)
    except IOError:
        font = ImageFont.load_default()
    
    text = "sorry :3"
    text_bbox = draw.textbbox((0, 0), text, font=font)
    text_width, text_height = text_bbox[2] - text_bbox[0], text_bbox[3] - text_bbox[1]
    draw.text(((bg.width - text_width) // 2, (bg.height - text_height) // 2), text, font=font, fill=(255, 255, 255, 255))

    bg.save(background_path)
    GREG.append(background_path)
    print("Sorry :3")


def delete_greg(signum, frame):
    for image_path in GREG:
        if os.path.exists(image_path):
            os.remove(image_path)
    print("bye :3")
    exit()


def main():
    signal.signal(signal.SIGINT, delete_greg)
    signal.signal(signal.SIGTERM, delete_greg)
    print("say exit to exit program, say start to start, press \"ctrl + c\" to stop in process g (IF YOU DO THIS, THE INFECTED PHOTOS WILL BE DELETED. JUST CLOSE OR KILL THE TERMINAL.)")
    ok = input().lower()

    while True:
        if ok == "exit":
            print("bye :3")
            exit()
        if ok == "start":
            bg = peak()
            if bg:
                greg(bg)
            time.sleep(10)
        else:
            print("ghreh")
            exit()

main()
